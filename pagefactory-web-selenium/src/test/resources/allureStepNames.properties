# Ru

####################################################################################################
# Элементы
####################################################################################################


ExecuteAction = Пользователь выполняет на элементе '%s' действие '%s' с параметрами '%s'
    # elementName, actionName, argsAsString
ExecuteCustomOperation = Пользователь выполняет операцию '%s'
    # endpointHandlerName

IsPresent = Пользователь получает признак наличия элемента '%s'
    # elementName
ShouldBePresent = Элемент '%s' должен присутствовать
    # elementName
ShouldNotBePresent = Элемент '%s' должен отсутствовать
    # elementName

IsDisplayed = Пользователь получает признак отображения элемента '%s'
    # elementName
ShouldBeDisplayed = Элемент '%s' должен отображаться
    # elementName
ShouldNotBeDisplayed = Элемент '%s' не должен отображаться
    # elementName

IsInFocus = Пользователь получает признак фокуса на элементе '%s'
    # elementName
ShouldBeInFocus = Элемент '%s' должен быть в фокусе
    # elementName
ShouldNotBeInFocus = Элемент '%s' должен быть не в фокусе
    # elementName

IsOnTheScreen = Пользователь получает признак нахождения элемента '%s' на экране
    # elementName
ShouldBeOnTheScreen = Элемент '%s' должен быть на экране
    # elementName
ShouldNotBeOnTheScreen = Элемент '%s' не должен быть на экране
    # elementName

GetElementBounds = Пользователь получает положение элемента '%s' для компонента '%s'
    # elementName, componentName
ShouldHaveDimensions = Элемент '%s' для компонента '%s' должен иметь размеры '%s'
   # elementName, componentName, expectedDimensions.toString()
ShouldNotHaveDimensions = Элемент '%s' для компонента '%s' не должен иметь размеры '%s'
    # elementName, componentName, expectedDimensions.toString()
ShouldHaveAbsoluteLocation = Элемент '%s' для компонента '%s' должен иметь абсолютное положение '%s'
    # elementName, componentName, expectedLocation.toString()
ShouldNotHaveAbsoluteLocation = Элемент '%s' для компонента '%s' не должен иметь абсолютное положение '%s'
    # elementName, componentName, expectedLocation.toString()
ShouldHaveScreenLocation = Элемент '%s' для компонента '%s' должен иметь положение на экране '%s'
    # elementName, componentName, expectedLocation.toString()
ShouldNotHaveScreenLocation = Элемент '%s' для компонента '%s' не должен иметь положение на экране '%s' 
    # elementName, componentName, expectedLocation.toString()
ShouldHaveCenterLocation = Центр элемента '%s' для компонента '%s' должен иметь положение на экране '%s'
    # elementName, componentName, expectedLocation.toString()
ShouldNotHaveCenterLocation = Центр элемента '%s' для компонента '%s' не должен иметь положение на экране '%s'
    # elementName, componentName, expectedLocation.toString()

GetScreenshot = Пользователь получает скриншот элемента '%s' для компонента '%s'
    # elementName, componentName
ShouldLooksLike = Скриншот элемента '%s' для компонента '%s' должен совпадать со скриншотом '%s'
    # elementName, componentName, String.valueOf(expectedScreenshot.getSize())
ShouldNotLooksLike = Скриншот элемента '%s' для компонента '%s' не должен совпадать со скриншотом '%s'
    # elementName, componentName, String.valueOf(expectedScreenshot.getSize())

IsSelected = Пользователь получает признак selected для элемента '%s'
    # elementName
ShouldBeSelected = Элемент '%s' должен быть выделен
    # elementName
ShouldNotBeSelected = Элемент '%s' не должен быть выделен
    # elementName

IsEnabled = Пользователь получает признак enabled для элемента '%s'
    # elementName
ShouldBeEnabled = Элемент '%s' должен быть доступен
    # elementName
ShouldBeDisabled = Элемент '%s' не должен быть доступен
    # elementName

IsComponentPresent = Пользователь для элемента '%s' получает признак наличия компонента '%s'
    # elementName, componentName
ComponentShouldBePresentMethod = У элемента '%s' компонент '%s' должен присутствовать
    # elementName, componentName
ComponentShouldNotBePresentMethod = У элемента '%s' компонент '%s' должен отсутствовать
    # elementName, componentName
IsComponentDisplayed = Пользователь для элемента '%s' получает признак отображения компонента '%s'
    # elementName, componentName
ComponentShouldBeDisplayedMethod = У элемента '%s' компонент '%s' должен отображаться
    # elementName, componentName
ComponentShouldNotBeDisplayedMethod = У элемента '%s' компонент '%s' не должен отображаться
    # elementName, componentName

GetAttributeValue = Пользователь у элемента '%s' получает значение свойства '%s'
    # elementName, propertyHolder.getName()
ShouldHaveAttributeText = У элемента '%s' значение свойства '%s' должно содержать текст '%s'
    # elementName, propertyName, expectedText
ShouldHaveAttributeValue = У элемента '%s' значение свойства '%s' должно содержать значение '%s'
    # elementName, propertyName, expectedStringValue.getShortDescription()
ShouldHaveAttributeNumber = У элемента '%s' значение свойства '%s' должно содержать число '%s'
    # elementName, propertyName, expectedNumberValue.getShortDescription()
ShouldNotHaveAttributeText = У элемента '%s' значение свойства '%s' не должно содержать текст '%s'
    # elementName, propertyName, expectedText
ShouldNotHaveAttributeValue = У элемента '%s' значение свойства '%s' не должно содержать текст '%s'
    # elementName, propertyName, expectedStringValue.getShortDescription()
ShouldNotHaveAttributeNumber = У элемента '%s' значение свойства '%s' не должно содержать число '%s'
    # elementName, propertyName, expectedNumberValue.getShortDescription()

HasState = Пользователь для элемента '%s' получает признак состояния '%s'
    # elementName, stateHolder.getName()
ShouldHaveState = Элемент '%s' должен находиться в состоянии '%s'
    # elementName, stateName
ShouldNotHaveState = Элемент '%s' не должен находиться в состоянии '%s'
    # elementName, stateName

GetColor = Пользователь получает цвет элемента '%s' для компонента '%s' и css-свойства '%s'
    # elementName, componentName, cssProperty
ShouldHaveColor = Элемент '%s' для компонента '%s' и css-свойства '%s' должен иметь цвет '%s'
    # elementName, componentName, cssProperty, expectedColor.toString()
ShouldNotHaveColor = Элемент '%s' для компонента '%s' и css-свойства '%s' не должен иметь цвет '%s'
    # elementName, componentName, cssProperty, expectedColor.toString()

GetText = Пользователь получает текст из элемента '%s'
    # elementName
ShouldHaveText = Элемент '%s' должен содержать текст '%s'
    # elementName, expectedText
ShouldHaveValue = Элемент '%s' должен содержать значение '%s'
    # elementName, expectedStringValue.getShortDescription()
ShouldHaveNumber = Элемент '%s' должен содержать число '%s'
    # elementName, expectedNumberValue.getShortDescription()
ShouldNotHaveText = Элемент '%s' не должен содержать текст '%s'
    # elementName, expectedText
ShouldNotHaveValue = Элемент '%s' не должен содержать значение '%s'
    # elementName, expectedStringValue.getShortDescription()
ShouldNotHaveNumber = Элемент '%s' не должен содержать число '%s'
    # elementName, expectedNumberValue.getShortDescription()

GetLabel = Пользователь получает лейбл элемента '%s'
    # elementName
ShouldHaveTextLabel = Элемент '%s' должен содержать текст лейбла '%s'
    # elementName, expectedText
ShouldHaveValueLabel = Элемент '%s' должен содержать значение лейбла '%s'
    # elementName, expectedStringValue.getShortDescription()
ShouldHaveNumberLabel = Элемент '%s' должен содержать число лейбла '%s'
    # elementName, expectedNumberValue.getShortDescription()
ShouldNotHaveTextLabel = Элемент '%s' не должен содержать текст лейбла '%s'
    # elementName, expectedText
ShouldNotHaveValueLabel = Элемент '%s' не должен содержать значение лейбла '%s'
    # elementName, expectedStringValue.getShortDescription()
ShouldNotHaveNumberLabel = Элемент '%s' не должен содержать число лейбла '%s'
    # elementName, expectedNumberValue.getShortDescription()

GetSize = Пользователь получает размер списка '%s'
    # elementName
GetIndex = Пользователь получает индекс элемента списка '%s'
    # elementName
GetValue = Пользователь получает значение отфильтрованного элемента списка '%s'
    # elementName
GetValues = Пользователь получает значения отфильтрованного элемента списка '%s'
    # elementName
ShouldHaveSize = Список '%s' должен иметь размер '%s'
    # elementName, String.valueOf(expectedSize)
ShouldNotHaveSize = Список '%s' не должен иметь размер '%s'
    # elementName, String.valueOf(expectedSize)
ShouldHaveSizeValue = Список '%s' должен иметь размер '%s'
    # elementName, expectedValue.getShortDescription()
ShouldNotHaveSizeValue = Список '%s' не должен иметь размер '%s'
    # elementName, expectedValue.getShortDescription()
ShouldHaveExpectedResult = Список '%s' должен содержать элемент '%s'
    # elementName, String.valueOf(expectedResult)
ShouldHaveNotNullResults = Элементы списка '%s' не должны быть null
    # elementName
ShouldHaveNullResults = Элементы списка '%s' должны быть null
    # elementName
ShouldHaveIndex = Список '%s' должен иметь элемент с индексом '%s'
    # elementName, String.valueOf(expectedIndex)
ShouldNotHaveIndex = Список '%s' не должен иметь элемент с индексом '%s'
    # elementName, String.valueOf(expectedIndex)
ShouldHaveIndexValue = Список '%s' должен иметь элемент с индексом '%s'
    # elementName, expectedValue.getShortDescription()
ShouldNotHaveIndexValue = Список '%s' не должен иметь элемент с индексом '%s'
    # elementName, expectedValue.getShortDescription()

Clear = Пользователь очищает элемент '%s'
    # elementName

Click = Пользователь нажимает на элемент '%s'
    # elementName
SingleTap = Пользователь выполняет tap на элементе '%s'
    # elementName
LongTap = Пользователь выполняет long tap на элементе '%s'
    # elementName
DoubleTap = Пользователь выполняет double tap на элементе '%s'
    # elementName

IsImage = Пользователь проверяет что элемент '%s' является изображением
    # elementName
SaveImageToFile = Пользователь сохраняет элемент '%s' в файл '%s'
    # elementName, filePath

HoverTo = Пользователь наводит курсор на элемент '%s'
    # elementName

TypeText = Пользователь в элемент '%s' вводит текст '%s'
    # elementName, text
ReplaceText = Пользователь в элементе '%s' заменяет текст на '%s'
    # elementName, text
SendKeyEvents = Пользователь в элементе '%s' вызывает события нажатия клавиш '%s'
    # elementName, keyEvents.toString()

SetFileName";
ShouldFileExist";


ScrollTo = Пользователь прокручивает страницу до элемента '%s'
    # elementName
ScrollUp";
ScrollRight";
ScrollDown";
ScrollLeft";

ScrollToElement";
ListScrollToVerticallyElement";

Filter";
GetFilterResult";
ExtractAll";

ExtractHeader";
ExtractAllRows";
ExtractFooter";

Close = Пользователь закрывает выпадающий список '%s'
    # elementName

Open = Пользователь открывает выпадающий список '%s'
    # elementName

IsOpen = Пользователь получает признак раскрытия выпадающего списка '%s'
    # elementName
ShouldBeClosed = Выпадающий список '%s' должен быть закрыт
    # elementName
ShouldBeOpen = Выпадающий список '%s' должен быть открыт
    # elementName

ShouldBeSorted = Элементы списка '%s' должны быть отсортированы по '%s'
    # elementName, comparator.getClass().getCanonicalName()

GetSelected";
GetByLabel";
GetByIndex";

AddLogEntry = Пользователь на странице '%s' добавляет в консоль запись '%s': '%s'
    # pageName, logLevel.getName(), message

DragAndDrop = Пользователь перетаскивает элемент '%s' в точку '%s'
    # elementName, target.toString()

GetStringAttributeValueMethod = Пользователь для элемента '%s' получает значение атрибута '%s'
    # elementName, attributeName
CheckBooleanAttributeValue = Элемент '%s' должен иметь атрибут '%s'
    # elementName, attributeName
CheckStringAttributeValue = Элемент '%s' должен иметь атрибут '%s' значение которого содержит '%s'
    # elementName, attributeName, expectedValue.getShortDescription()



ColumnShouldBeDisplayed = В таблице '%s' должна присутствовать колонка '%s'
    # elementName, columnName
ColumnShouldNotBeDisplayed = В таблице '%s' должна отсутствовать колонка '%s'
    # elementName, columnName


####################################################################################################
# Браузер
####################################################################################################


BrowserGetTabCount = Пользователь получает количество открытых вкладок браузера
    #
BrowserGetActiveTabTitle = Пользователь получает заголовок активной вкладки браузера
    #
BrowserGetActiveTabUrl = Пользователь получает url активной вкладки браузера
    #
BrowserGetAllTabTitles = Пользователь получает заголовки всех открытых вкладок браузера
    #
BrowserGetAllTabUrls = Пользователь получает url всех открытых вкладок браузера
    #

BrowserGetCookieByName = Пользователь получает cookie с именем '%s'
    # name
BrowserGetCookies = Пользователь получает все cookies
    #
BrowserAddCookie = Пользователь добавляет cookie
    #
BrowserCleanCookies = Пользователь очищает все cookies
    #
BrowserDeleteCookie = Пользователь удаляет cookie
    #
BrowserDeleteCookieByName = Пользователь удаляет cookie с именем '%s'
    # name

BrowserGetPageScreenshot = Пользователь получает скриншот экрана браузера
    #
BrowserGetInnerWindowSize = Пользователь получает внутренние размеры окна браузера
    #
BrowserGetOuterWindowSize = Пользователь получает внешние размеры окна браузера
    #
BrowserSetOuterWindowSize = Пользователь устанавливает размеры окна браузера '%s'
    # windowSize.toString()
BrowserGetAbsoluteWindowLocation = Пользователь получает абсолютное положение окна браузера
    #
BrowserSetAbsoluteWindowLocation = Пользователь устанавливает абсолютное положение окна браузера '%s'
    # location.toString()
BrowserSetWindowFullscreen = Пользователь переводит браузер в полноэкранный режим
    #
BrowserSetWindowMaximized = Пользователь максимизирует размер окна браузера
    #

BrowserGetActiveTabPageSource";
BrowserGetActiveTabScreenshot";

OpenEmptyTab = Пользователь открывает пустую вкладку
    #
OpenTabWithUrl = Пользователь открывает вкладку с url '%s'
    # absoluteUrl
BrowserRefresh = Пользователь онажимает кнопку 'Обновить'
    #
BrowserBack = Пользователь нажимает кнопку 'Назад'
    #
BrowserOpenUrl = Пользователь открывает в браузере url '%s'
    # relativeOrAbsoluteUrl
BrowserCloseActiveTab = Пользователь закрывает активную вкладку
    #
BrowserCloseTabWithTitle = Пользователь закрывает вкладку с заголовком '%s'
    # tabTitle.getShortDescription()
BrowserCloseTabWithUrl = Пользователь закрывает вкладку с url '%s'
    # tabUrl.getShortDescription()
BrowserSwitchToTabWithTitleMethod = Пользователь переключается на вкладку с заголовком '%s'
    # tabTitle.getShortDescription()
BrowserSwitchToTabWithUrlMethod = Пользователь переключается на вкладку с url '%s'
    # tabUrl.getShortDescription()

BrowserActiveTabShouldHaveTitle = Активная вкладка браузера должна иметь заголовок '%s'
    # expectedText
BrowserActiveTabShouldNotHaveTitle = Активная вкладка браузера не должна иметь заголовок '%s'
    # expectedText
BrowserActiveTabShouldHaveTitleValue = Активная вкладка браузера должна иметь заголовок '%s'
    # expectedStringValue.getShortDescription()
BrowserActiveTabShouldNotHaveTitleValue = Активная вкладка браузера не должна иметь заголовок '%s'
    # expectedStringValue.getShortDescription()

BrowserActiveTabShouldHaveUrl = Активная вкладка браузера должна иметь url '%s'
    # expectedText
BrowserActiveTabShouldNotHaveUrl = Активная вкладка браузера не должна иметь url '%s'
    # expectedText
BrowserActiveTabShouldHaveUrlValue = Активная вкладка браузера должна иметь url '%s'
    # expectedTextValue.getShortDescription()
BrowserActiveTabShouldNotHaveUrlValue = Активная вкладка браузера не должна иметь url '%s'
    # expectedTextValue.getShortDescription()

BrowserShouldHaveTabWithTitle = В браузере должна присутствовать вкладка с заголовком '%s'
    # expectedText
BrowserShouldNotHaveTabWithTitle = В браузере не должна присутствовать вкладка с заголовком '%s'
    # expectedText
BrowserShouldHaveTabWithTitleValue = В браузере должна присутствовать вкладка с заголовком '%s'
    # expectedTextValue.getShortDescription()
BrowserShouldNotHaveTabWithTitleValue = В браузере не должна присутствовать вкладка с заголовком '%s'
    # expectedTextValue.getShortDescription()

BrowserShouldHaveTabWithUrl = В браузере должна присутствовать вкладка с url '%s'
    # expectedText
BrowserShouldNotHaveTabWithUrl = В браузере не должна присутствовать вкладка с url '%s'
    # expectedText
BrowserShouldHaveTabWithUrlValue = В браузере должна присутствовать вкладка с url '%s'
    # expectedTextValue.getShortDescription()
BrowserShouldNotHaveTabWithUrlValue = В браузере не должна присутствовать вкладка с url '%s'
    # expectedTextValue.getShortDescription()

BrowserShouldHaveTabsCountNumber = В браузере должно быть открыто вкладок '%s'
    # String.valueOf(expectedNumber)
BrowserShouldNotHaveTabsCountNumber = В браузере не должно быть открыто вкладок '%s'
    # String.valueOf(expectedNumber)
BrowserShouldHaveTabsCountNumberValue = В браузере должно быть открыто вкладок '%s'
    # expectedNumberValue.getShortDescription()
BrowserShouldNotHaveTabsCountNumberValue = В браузере не должно быть открыто вкладок '%s'
    # expectedNumberValue.getShortDescription()
